package dev.mcmt.core.blacklist;

import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Consumer;
import java.util.stream.Collectors;

public final class BlacklistManager {
    private final Set<String> permanent = ConcurrentHashMap.newKeySet();
    private final Consumer<String> logger;
    private final Path filePath;

    public BlacklistManager(Path configDir, Consumer<String> logger) {
        this.logger = logger != null ? logger : (s) -> {};
        this.filePath = configDir.resolve("Blacklist.txt");
        loadFromFile();
    }

    public boolean isBlacklisted(String key) {
        return permanent.contains(key);
    }

    public synchronized void blacklistPermanent(String key, Throwable cause) {
        if (permanent.add(key)) {
            logger.accept("[BlacklistManager] Permanently blacklisted: " + key + " due to: " + cause);
            saveToFile();
        }
    }

    private void loadFromFile() {
        if (!Files.exists(filePath)) {
            logger.accept("[BlacklistManager] No Blacklist.txt found, will create on first save.");
            return;
        }
        try (BufferedReader reader = Files.newBufferedReader(filePath)) {
            reader.lines()
                  .map(String::trim)
                  .filter(line -> !line.isEmpty() && !line.startsWith("#") && !line.startsWith("["))
                  .forEach(permanent::add);
            logger.accept("[BlacklistManager] Loaded " + permanent.size() + " entries from Blacklist.txt");
        } catch (IOException e) {
            logger.accept("[BlacklistManager] Failed to load Blacklist.txt: " + e);
        }
    }

    private void saveToFile() {
        try {
            Files.createDirectories(filePath.getParent());
            // Group by modid (everything before first colon)
            Map<String, List<String>> grouped = permanent.stream()
                .collect(Collectors.groupingBy(k -> {
                    int idx = k.indexOf(':');
                    return idx > 0 ? k.substring(0, idx) : "unknown";
                }, TreeMap::new, Collectors.toList()));

            try (BufferedWriter writer = Files.newBufferedWriter(filePath)) {
                writer.write("# Blacklist.txt â€” auto-generated by MCMT\n");
                writer.write("# Any tick loop listed here will always run on the main thread.\n");
                writer.write("# Grouped by mod for clarity.\n\n");

                for (var entry : grouped.entrySet()) {
                    writer.write("[" + entry.getKey() + "]\n");
                    for (String key : entry.getValue()) {
                        writer.write(key);
                        writer.newLine();
                    }
                    writer.newLine();
                }
            }
            logger.accept("[BlacklistManager] Saved " + permanent.size() + " entries to Blacklist.txt");
        } catch (IOException e) {
            logger.accept("[BlacklistManager] Failed to save Blacklist.txt: " + e);
        }
    }
}
